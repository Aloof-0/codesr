1. 为什么要学习xpath和lxml
lxml是一款高性能的python HTML/XML 解析器,我们可以利用XPath,来快速的定位元素已经获取节点信息

2.什么是xpath
XPath是一门在HTML/XML文档中查找信息的语言,可以用来在HTML/XML文档中对元素和属性进行遍历

3.xpath的节点
   根节点--    <book>
        子节点--     <title> Harry Potter</title>
                    <aurhor>J K.Rowling</author>
                    <year>2005</year>
                    <price>29.99</price>
                </book>

4 选取节点
           表达式                描述
(节点名)    nodename             选取元素
            /                    从根节点选取,或者是元素和元素间的过度
           //                    重匹配选择的当前节点选择文档中的节点,而不考虑它们的位置
           .                     选取当前节点
           ..                    选取当前节点的父节点
           @                     选取属性
           text()                选取文本

5.实例
        表达式                    描述
        bookstore                 选择bookstore元素
        /bookstore                选取跟元素bookstore.注释:路径起始于正斜杠(/),则此路径始终代表到某元素的绝对路径！
        bookstore/book            选取属于bookstore子元素的所有book元素
        //book                    选取所有book子元素,而不管他们在文档中的位置
        bookstore//book           选择属于bookstore元素的后代的所有book元素,而不管它们位于bookstore之下的什么位置
        //book/title/@lang        选择所有的book下面的title中的属性的值
        //book/title/text()       选择所有的book下面的title的文本

6.查找特点的节点
        表达式                                描述
        //title[@lang="eng"]                  选择lang属性值为eng的所有的title元素
        /bookstore/book[1]                    选取属于bookstore子元素的第一个book元素     # 注意点:在xpath中,第一个元素的位置是1， 最后一个元素的位置是last(),倒数第二是last()-1
        /bookstore/book[last()]               选取属于bookstore子元素的最后一个book元素
        /bookstore/book[last()-1]             选取属于bookstore子元素的倒数第二个book元素
        /bookstore/book[position()>1]         选择bookstore下面的book元素，从第二个开始选择
        //book/title[text()='Harry']          选择所有book下的title元素，仅仅选择文本为HarryPotter的title元素
        //book/title[contains(text()),'rry']  选择所有的book的title元素,仅仅选择文本以Harry开头的title元素
        /bookstore/book[price>35.00]/title    选取bookstore元素中的book元素的所有title元素,且其中的price元素的值必须大于35.00

7.选取未知节点 -- XPath 通配符可用来选取位置的XML元素
        通配符                      描述
        *                           匹配任何元素节点
        @*                          匹配任何属性节点
        node()                      匹配任何类型的节点

8. 实例
        路径表达式                   结果
        /bookstore/*                选取bookstore元素的所有子元素
        //*                         选取文档中的所有元素
        //title[@*]                 选取所有带有属性的title元素

9.选取若干路径
        路径表达式                               结果
        //book/title | //book/price              选取book元素的所有title和price元素
        //title | //price                        选取文档中的所有title和price元素
        /bookstore/book/title | //price          选取属于bookstore元素的book元素所有title元素.以及文档中所有的price元素